// Code generated by MockGen. DO NOT EDIT.
// Source: ../lib/services/services.go

// Package dot is a generated GoMock package.
package dot

import (
	reflect "reflect"

	services "github.com/ChainSafe/gossamer/lib/services"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start))
}

// Stop mocks base method.
func (m *MockService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockService)(nil).Stop))
}

// MockServiceRegistryIFace is a mock of ServiceRegistryIFace interface.
type MockServiceRegistryIFace struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRegistryIFaceMockRecorder
}

// MockServiceRegistryIFaceMockRecorder is the mock recorder for MockServiceRegistryIFace.
type MockServiceRegistryIFaceMockRecorder struct {
	mock *MockServiceRegistryIFace
}

// NewMockServiceRegistryIFace creates a new mock instance.
func NewMockServiceRegistryIFace(ctrl *gomock.Controller) *MockServiceRegistryIFace {
	mock := &MockServiceRegistryIFace{ctrl: ctrl}
	mock.recorder = &MockServiceRegistryIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRegistryIFace) EXPECT() *MockServiceRegistryIFaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServiceRegistryIFace) Get(srvc interface{}) services.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", srvc)
	ret0, _ := ret[0].(services.Service)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockServiceRegistryIFaceMockRecorder) Get(srvc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceRegistryIFace)(nil).Get), srvc)
}

// RegisterService mocks base method.
func (m *MockServiceRegistryIFace) RegisterService(service services.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterService", service)
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockServiceRegistryIFaceMockRecorder) RegisterService(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockServiceRegistryIFace)(nil).RegisterService), service)
}

// StartAll mocks base method.
func (m *MockServiceRegistryIFace) StartAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartAll")
}

// StartAll indicates an expected call of StartAll.
func (mr *MockServiceRegistryIFaceMockRecorder) StartAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAll", reflect.TypeOf((*MockServiceRegistryIFace)(nil).StartAll))
}

// StopAll mocks base method.
func (m *MockServiceRegistryIFace) StopAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopAll")
}

// StopAll indicates an expected call of StopAll.
func (mr *MockServiceRegistryIFaceMockRecorder) StopAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAll", reflect.TypeOf((*MockServiceRegistryIFace)(nil).StopAll))
}
